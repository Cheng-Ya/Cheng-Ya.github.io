---
layout:     post
title:      "我终于学会 Git 啦~(一)"
subtitle:   "Git 理论基础"
date:       2018-07-11
author:     "Cheng"
header-img: "img/post-bg-about-Jekyll.webp"
tags:
    - Git
---

## 文章讲些啥
  * Git 理论基础
    * [记录快照，非差异比较](#记录快照，非差异比较)
    * [大部分操作都在本地执行](#大部分操作都在本地执行)
    * [几乎不会丢失数据](#几乎不会丢失数据)
    * [三种状态](#三种状态)

 ## Git 理论基础

  ### 记录快照，非差异比较
  本质上来讲，Git 是一套内容寻址 (content-addressable) 文件系统。[Git Pro 第二版](https://git-scm.com/book/zh/v2)第一章第三节开头写道：
  > Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。


  > Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。

  Git 中所谓的快照，可以简单的理解为 ```项目的结构```，通过分析某一个版本的快照，Git 能清晰的知道该版本中每一个 ```被追踪过的``` 文件在项目中的位置。用户在进行提交操作(即使用 ```git commit```)时，Git 会根据暂存区中的文件结构生成快照，快照以 ```tree``` 对象的形式保存(后面我们会提到什么是 ```tree```对象)，并且 Git 会为每一个快照生成唯一的散列(SHA-1)值，也就是上述引用中提到的快照的索引。

  ### 大部分操作都在本地执行
  如标题内容，在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。这意味着你实际上可以在完全离线的环境中进行版本管理的一系列操作，例如暂存文件更新或提交文件更新。同样也正是因为 Git 的这个性质，Git 中的大部分命令看起来都几乎可以在一瞬间完成，例如 Git 引以为豪的创建分支或是分支切换功能。

  ### 几乎不会丢失数据
  你所执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS(version control system) 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。

  ### 三种状态
  为了便于后续理解 Git 的各种操作原理，请记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一：已修改（modified）、已暂存（staged）和已提交（committed）。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 已提交表示数据已经安全的保存在本地数据库中。

  由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

  ![img-1.4.1](https://git-scm.com/book/en/v2/images/areas.png)

  Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。

  工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。

  暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’'，不过一般说法还是叫暂存区域。

  基本的 Git 工作流程如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

  如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 在Git 基础一章，你会进一步了解这些状态的细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。