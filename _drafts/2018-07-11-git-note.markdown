---
layout:     post
title:      "我终于学会 Git 啦~(合)"
subtitle:   "(๑¯ิε ¯ิ๑)"
date:       2018-07-11
author:     "Cheng"
header-img: "img/post-bg-about-Jekyll.webp"
tags:
    - Git
---

## 文章讲些啥
  * Git 理论基础
    * [记录快照，非差异比较](#记录快照，非差异比较)
    * [大部分操作都在本地执行](#大部分操作都在本地执行)
    * [几乎不会丢失数据](#几乎不会丢失数据)
    * [三种状态](#三种状态)
  * 常用命令及应用场景
    * [获取 Git 仓库](#获取Git仓库)
    * [记录更新到仓库](#记录更新到仓库)
    * [分支](#分支)
    * [远程仓库](#远程仓库)
    * [几个简单的小例子](#几个简单的小例子)
      * [查看提交历史](#查看提交历史)
      * [撤销还未添加到暂存区的更新](#撤销还未添加到暂存区的更新)
      * [撤销添加到暂存区的更新](#撤销添加到暂存区的更新)
      * [更改\撤销最后一次提交](#更改\撤销最后一次提交)
      * [合并和变基选择哪一种](#合并和变基选择哪一种)
  * 关于 Git 的一些底层原理
    * [记录快照是什么意思呢？](#记录快照是什么意思呢？)
    * [切换分支是在切换什么?](#切换分支是在切换什么?)


 ## Git 理论基础

  ### 记录快照，非差异比较
  本质上来讲，Git 是一套内容寻址 (content-addressable) 文件系统。[Git Pro 第二版](https://git-scm.com/book/zh/v2)第一章第三节开头写道：
  > Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。


  > Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。

  Git 中所谓的快照，可以简单的理解为 ```项目的结构```，通过分析某一个版本的快照，Git 能清晰的知道该版本中每一个 ```被追踪过的``` 文件在项目中的位置。用户在进行提交操作(即使用 ```git commit```)时，Git 会根据暂存区中的文件结构生成快照，快照以 ```tree``` 对象的形式保存(后面我们会提到什么是 ```tree```对象)，并且 Git 会为每一个快照生成唯一的散列(SHA-1)值，也就是上述引用中提到的快照的索引。

  ### 大部分操作都在本地执行
  如标题内容，在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。这意味着你实际上可以在完全离线的环境中进行版本管理的一系列操作，例如暂存文件更新或提交文件更新。同样也正是因为 Git 的这个性质，Git 中的大部分命令看起来都几乎可以在一瞬间完成，例如 Git 引以为豪的创建分支或是分支切换功能。

  ### 几乎不会丢失数据
  你所执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS(version control system) 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。

  ### 三种状态
  为了便于后续理解 Git 的各种操作原理，请记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一：已修改（modified）、已暂存（staged）和已提交（committed）。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。 已提交表示数据已经安全的保存在本地数据库中。

  由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

  ![img-1.4.1](https://git-scm.com/book/en/v2/images/areas.png)

  Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。

  工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。

  暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’'，不过一般说法还是叫暂存区域。

  基本的 Git 工作流程如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

  如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 在Git 基础一章，你会进一步了解这些状态的细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。


##  常用命令及应用场景

  ### 获取Git仓库
  一般来说，获取 Git 仓库有两种方式，一种是使用 ```git init```命令，另一种是 ```git clone [url]``` 。```git init``` 命令会初始化一个全新的 Git 仓库，其适用于你已经创建好了一个本地项目，进行了一定程度的开发，中途想对该项目进行版本控制的情况。对于项目负责人来说，也可以使用该命令对新项目进行 Git 仓库的初始化。```git clone [url]``` 会将你指定地址(url)的项目克隆到你本地的设备上，这一般适用于团队协作开发的情况，这也是获取 Git 仓库使用得较多的命令。

  那么是否还有别的方式获取 Git 仓库呢？答案是有。Git 中关于版本控制的所有数据，都存储在项目根目录(不一定在根目录，实际上应该是你或者项目所有者使用 ```git init``` 命令初始化 Git 仓库时的目录)中的 ```.git``` 文件夹中。所以你只要保证 ```.git``` 文件夹的完整性，那么实际上你就拥有了该项目完整的版本信息。用大白话讲，你通过U盘或其他方式获取到你想要项目的完整项目拷贝，该项目本质上讲和你使用 ```git clone [url]``` 命令获取到的项目没有区别。比如你们公司网络出现了问题，无法进行线上协作，而另一个同事的设备中有你所需要的项目版本，你可以用U盘将他设备中的项目拷贝过来，基于你想要的版本继续开发。请注意，这种方式虽然可以让你继续开发，但是实际上会损失一些 Git 中的开发日志，如果你希望在往后的某个时间点查看 Git 的开发日志，比如使用 ```git reflog``` 命令查看 ```HEAD``` 的变化情况，那么可能不会出现你预期的结果，因为 Git 中的部分开发日志是完全[基于你 ```本地 Git 仓库``` 进行记录的](https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection#_git_reflog)。

  #### ```git init```
  如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：

  ```
  $ git init
  ```

  该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。

  如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：

  ```
  $ git add *.c
  $ git add LICENSE
  $ git commit -m 'initial project version'
  ```
  稍后我们会解释每一条指令的意思。 现在，你已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。

  #### ```git clone [url]```
  如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你们项目负责人已经发布在 GitHub 上的某个项目。```git clone``` 将克隆该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。

  克隆仓库的命令格式是 ```git clone [url]``` 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：

  ```
  $ git clone https://github.com/libgit2/libgit2
  ```
  这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：

  ```
  $ git clone https://github.com/libgit2/libgit2 mylibgit
  ```
  这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。

  Git 支持多种数据传输协议。 上面的例子使用的是 ```https://``` 协议，不过你也可以使用 ```git://``` 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。

  ### 记录更新到暂存区
  考虑到我们接下来要学习的命令在日常中的使用非常频繁，在开始本小节之前，我们先理解一些基本的概念。

  想必你还记得在 Git 中文件的三种状态：```已修改（modified）```、```已暂存（staged）``` 和 ```已提交（committed）```。同时根据这三种状态引入 Git 项目的三个工作区域的概念：```工作目录```、 ```暂存区域``` 和 ```Git 仓库```。请注意我们在前面的措辞 - ```在 Git中的文件```，这意味在项目中的文件不一定在 Git 中(这里意思是被 Git 纳入管理)，而在 Git 中的文件一定在项目中。进而我们得到了另一个关于文件状态的概念，```已追踪(tracked)``` 或 ```未追踪(untracked)```。已经被纳入 Git 仓库进行管理的文件处于已追踪的状态，只有已经处于已追踪状态的文件才会拥有上述 ```已修改（modified）```、```已暂存（staged）``` 和 ```已提交（committed）```的三种状态描述。未纳入过 Git 仓库或者被 Git 仓库移除了的文件属于未追踪的状态，Git 不会对未追踪的文件进行版本管理。

  因此，如果我们从项目的角度出发，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。

  编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下：

  ![img-2.2.1](https://git-scm.com/book/en/v2/images/lifecycle.png)

  #### ```git status```
  要查看哪些文件处于什么状态，可以用 ```git status``` 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：

  ```
  $ git status
  On branch master
  nothing to commit, working directory clean
  ```

  这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 “master”,这是默认的分支名。

  现在，让我们在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 ```git status``` 命令，你将看到一个新的未跟踪文件：

  ```
  $ echo 'My Project' > README
  $ git status
  On branch master
  Untracked files:
    (use "git add <file>..." to include in what will be committed)

      README

  nothing added to commit but untracked files present (use "git add" to track)
  ```

  在状态报告中可以看到新建的 README 文件出现在 ```Untracked files``` 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”。

  #### ```git add```
  可以使用命令 ```git add``` 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：

  ```
  $ git add README
  ```

  此时再运行 ```git status``` 命令，会看到 README 文件已被跟踪，并处于暂存状态：

  ```
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   README
  ```

  只要在 ```Changes to be committed``` 这行下面的，就说明是已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。 你可能会想起之前我们使用 ```git init``` 后就运行了 ```git add (files)``` 命令，开始跟踪当前目录下的文件。 ```git add``` 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。

  ```git add``` 还可以将处于已修改状态的文件提交到暂存区中。

  现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 ```CONTRIBUTING.md``` 的已被跟踪的文件，然后运行 ```git status``` 命令，会看到下面内容：

  ```
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   README

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   CONTRIBUTING.md
  ```

  文件 ```CONTRIBUTING.md``` 出现在 ```Changes not staged for commit``` 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 ```git add``` 命令。现在让我们运行 ```git add``` 将 ```CONTRIBUTING.md``` 放到暂存区，然后再看看 ```git status``` 的输出：

  ```
  $ git add CONTRIBUTING.md
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   README
      modified:   CONTRIBUTING.md
  ```

  现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 ```CONTRIBUTING.md``` 里再加条注释， 重新编辑存盘后，准备好提交。 不过且慢，再运行 git status 看看：

  ```
  $ nano CONTRIBUTING.md
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   README
      modified:   CONTRIBUTING.md

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   CONTRIBUTING.md
  ```

  怎么回事？ 现在 ```CONTRIBUTING.md``` 文件同时出现在暂存区和非暂存区。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 ```git add``` 命令时的版本， 如果你现在提交，```CONTRIBUTING.md``` 的版本是你最后一次运行 ```git add``` 命令时的那个版本，而不是你运行 ```git commit``` 时，在工作目录中的当前版本。 所以，运行了 ```git add``` 之后又作了修订的文件，需要重新运行 ```git add``` 把最新版本重新暂存起来：

  ```
  $ git add CONTRIBUTING.md
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      new file:   README
      modified:   CONTRIBUTING.md
  ```

  我们可以看到，上面两个文件又处于已暂存状态了。

  ```git add``` 是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态(后面我们会提到)等。 将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。

  #### ```git diff```
  你刚刚通过 ```git add``` 命令把文件提交到了暂存区，只差一步就可以将代码提交到 Git 仓库，但是这时的你却突然想不起来自己对文件到底进行了什么改动，对于像你这样有着良好职业操守的程序员来说，这种模糊的记忆是不能容忍的，因此你一定需要某个方法查看文件具体的改动。你可能想到了使用 ```git status``` 命令可以查看文件的状态，但实际上该命令的输出仅限于对文件的状态进行描述，无法提供更多关于文件具体改动的信息，而 ```git diff``` 命令提供了这样的功能。

  假如再次修改 ```README``` 文件后暂存，然后编辑 ```CONTRIBUTING.md``` 文件后先不暂存， 运行 ```git status``` 命令将会看到：

  ```
  $ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)

      modified:   README

  Changes not staged for commit:
    (use "git add <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

      modified:   CONTRIBUTING.md
  ```

  很明显这些信息不够详细。

  ##### 不加参数的 ```git diff```

  要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 ```git diff```：

  ```
  $ git diff
  diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
  index 8ebb991..643e24f 100644
  --- a/CONTRIBUTING.md
  +++ b/CONTRIBUTING.md
  @@ -65,7 +65,8 @@ branch directly, things can get messy.
  Please include a nice description of your changes when you submit your PR;
  if we have to read the whole diff to figure out why you're contributing
  in the first place, you're less likely to get feedback and have your change
  -merged in.
  +merged in. Also, split your changes into comprehensive chunks if your patch is
  +longer than a dozen lines.

  If you are starting to work on a particular area, feel free to submit a PR
  that highlights your work in progress (and note in the PR title that it's
  ```

  此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。用大白话讲，```git diff``` 是将你在工作目录中文件还未修改时的样子和文件已修改后的样子进行对比。请注意，如果你对文件使用了 ```git add``` 命令，文件就已经属于已暂存状态而不是前面所说的已修改状态了。

  假设你现在的工作目录是干净的，使用 ```git status```命令应该看到：

  ```
  $ git status
  On branch master
  nothing to commit, working directory clean
  ```

  现在编辑 ```CONTRIBUTING.md``` 文件，在文件底部添加一行文本："hello world"，然后直接运行 ```git diff``` 命令(再次注意，我们还未使用```git add```命令暂存该文件)，你将会看到：

  ```
  $ nano CONTRIBUTING.md
  $ git diff
  diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
  index 91ca0fa..b3fda2b 100644
  --- a/CONTRIBUTING.md
  +++ b/CONTRIBUTING.md
  @@ -1 +1,2 @@
  +hello world
  ```

  Git 给出了文件详细的改动信息，包括哪些文件有改动以及文件改动的内容。

  ##### ```git diff --cached```
  ```git diff``` 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。所以有时候你使用 ```git add``` 命令一下子暂存了所有更新过的文件后，运行 ```git diff``` 后却什么也没有，就是这个原因。

  ```git diff --cached```(更高级的 Git 版本：1.6.1及以上可以使用 ```git diff --staged``` 命令，效果一样，但是更容易记忆)命令可以让我们查看暂存区和仓库之间的文件对比(你可能不容易理解这句话的意思，但是没关系，后面我们会具体讲解工作目录、暂存区和仓库之间的关系。这里你只需要知道是这么回事就可以了)。
  如果你需要查看已暂存的将要添加到下次提交里的内容，用这个命令就完事了。

  之前我们编辑了 ```CONTRIBUTING.md``` 文件，现在我们使用 ```git add``` 命令将其添加到暂存区并且再次使用 ```git diff``` 命令查看：

  ```
  $ git add CONTRIBUTING.md
  $ gid diff
  ```

  你会发现并没有输出，这是正常的。

  接下来，我们使用 ```git diff --cached``` 命令：

  ```
  $ git diff --cached
  diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
  index 91ca0fa..b3fda2b 100644
  --- a/CONTRIBUTING.md
  +++ b/CONTRIBUTING.md
  @@ -1 +1,2 @@
  +hello world
  ```

  我们又能看到文件的详细改动了。

  #### ```git commit```
  现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 ```git add``` 过，否则提交的时候不会将这些还没暂存起来的变化提交到 Git 仓库中。所以，每次准备提交前，先用 ```git status``` 看下，是不是都已暂存起来了， 然后再运行提交命令 ```git commit```：

  ```
  $ git commit
  ```

  这种方式会启动文本编辑器以便输入本次提交的说明。 (默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。对于 ubuntu 16.04来说，默认会启动 emacs 编辑器）。

  编辑器会显示类似下面的文本信息（本例选用 emacs 的屏显方式展示）：

  ```
  # Please enter the commit message for your changes. Lines starting
  # with '#' will be ignored, and an empty message aborts the commit.
  # On branch master
  # Changes to be committed:
  #       modified:   CONTRIBUTING.md
  #
  ```

  可以看到，默认的提交消息包含最后一次运行 ```git status``` 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。 你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。我们在第一行输入提交信息："第一次提交"，然后退出编辑器并告知 Git 保留本次提交，最后你会看到：

  ```
  [master 4f9fcb7] 第一次提交
  1 file changed, 1 insertion(+)
  ```

  好，现在你已经创建了第一个提交！ 可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（4f9fcb7），以及在本次提交中，有多少文件修订过，多少行添加和删改过。

  请记住，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。

  ### 分支
  在 Git 中，分支是一项及其强大的功能。关于分支具体的原理，我们将会在第三章 [切换分支是在切换什么?](#切换分支是在切换什么?) 中解释，本节将先给出关于本地分支使用的常用命令和应用场景。

  #### ```git branch```
  ##### ```git branch [branch name]```
  使用 ```git branch [branch name]``` 命令可以创建一个新的分支，你完全不用担心创建分支会产生多余的副作用，实际上，Git 非常鼓励你创建分支进行协作开发。新创建的分支中的内容和你使用 ```git branch``` 命令时所在分支的内容一模一样(虽然这样说不专业，但是为了便于记忆，我们先称这样的结果为两个分支的内容一模一样)。看以下列子：假设你现在在 ```master``` 分支上，你希望创建一个名为 ```new_branch``` 的分支。首先使用 ```git branch```命令，该命令会列出你本地所有的分支，并用 ```*``` 标记你当前所处的分支：

  ```
  $ git branch
  * master
  ```

  现在我们使用 ```git branch [branch name]``` 命令创建 ```new_branch``` 分支：

  ```
  $ git branch new_branch
  ```
  然后使用 ```git branch``` 查看分支情况：

  ```
  $ git branch
  * master
    new_branch
  ```

  可以看到，分支列表里出现了我们刚刚创建的 ```new_branch```。注意，这时仍然处于 ```master```分支，后面我们会讲到如何切换到 ```new_branch``` 分支。

  ##### ```git branch -d [branch name]```
  使用 ```git branch -d [branch name]``` 命令可以删除本地分支：

  ```
  $ git branch -d new_branch
  ```

  ```
  $ git branch
  * master
  ```

  可以看到刚刚我们创建的 ```new_branch``` 分支已经没有出现在分支列表中了。

  ##### ```git branch --merged``` 和 ```git branch --no-merged```
  ```git branch --merged``` 命令会列出已经和当前分支 ```合并``` 的分支。

  ```git branch --no-merged``` 命令会列出已经和当前分支 ```未合并``` 的分支。

  我们在后面会提到 [合并](#git\ merge) 的概念。以上两个命令对于你想查看哪些分支可以被删除时可能会很有用。

  #### ```git checkout```
  ##### ```git checkout [branch name]```
  该命令会将你指定的分支切换为当前分支。我们之前删除了 ```new_branch``` 分支，现在我们再次创建名为 ```new_branch``` 以便于解释分支切换：

  ```
  $ git branch new_branch
  $ git branch
  * master
    new_branch
  ```

  使用 ```git checkout [branch name]``` 命令：

  ```
  $ git checkout new_branch
  $ git branch
    master
  * new_branch
  ```

  可以看到，当前分支已经是 ```new_branch``` 了。





