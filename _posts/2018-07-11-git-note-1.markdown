---
layout:     post
title:      "我终于学会 Git 啦~"
subtitle:   "(๑¯ิε ¯ิ๑)"
date:       2018-07-11
author:     "Cheng"
header-img: "img/post-bg-about-Jekyll.webp"
tags:
    - Git
---

## 文章讲些啥
  * Git 理论基础
    * [记录快照，非差异比较](#记录快照，非差异比较)
    * [大部分操作都在本地执行](#大部分操作都在本地执行)
    * [几乎不会丢失数据](#几乎不会丢失数据)
    * [三种状态](#三种状态)
  * 常用命令及应用场景
    * [初始化仓库](#初始化仓库)
    * [记录更新到暂存区](#记录更新到暂存区)
    * [提交更新到数据库](#提交更新到数据库)
    * [工作目录和暂存区之间的交互](#工作目录和暂存区之间的交互)
    * [暂存区和数据库之间的交互](#暂存区和数据库之间的交互)
    * [分支关系](#分支交互)
    * [几个简单的小例子](#几个简单的小例子)
      *[撤销还未添加到暂存区的更新](#撤销还未添加到暂存区的更新)
      *[撤销添加到暂存区的更新](#撤销添加到暂存区的更新)
      *[更改\撤销最后一次提交](#更改\撤销最后一次提交)
      *[合并和变基选择哪一种](#合并和变基选择哪一种)
  * 尝试找出 Git 中的ONE PICEC
    * [记录快照是什么意思呢？](#记录快照是什么意思呢？)
    * [切换分支是在切换什么?](#切换分支是在切换什么?)


 ## Git 理论基础

  ### 记录快照，非差异比较
  [Git Pro 第二版](https://git-scm.com/book/zh/v2)第一章第三节开头写道：
  > Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。
  > Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。

  老实说，我起初看到上面的两段描述只剩下一脸懵逼，如果天资聪颖的你也和当时我一样未能理解其中奥义，没有关系，我现在可以简单的帮你理清上面的概念。

  Git 中所谓的快照，其实可以理解为 ```项目的结构```，通过分析某一个版本的快照，Git 能清晰的知道该版本 ```被追踪过的``` 每一个文件在项目中的位置。



